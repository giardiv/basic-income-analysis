shiny::runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
counties <- readRDS("~/Lines/R/App-3-4/data/counties.rds")
install.packages(c("maps", "mapproj"))
library(shiny)
library(maps)
library(mapproj)
counties <- readRDS("census-app/data/counties.rds")
head(counties)
source("./helpers.R")
counties <- readRDS("./data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
counties <- readRDS("counties.rds")
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/App-3-4')
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
shiny::runApp('Lines/R/stockVis')
install.packages(c("quantmod"))
runApp('Lines/R/stockVis')
runApp('Lines/R/stockVis')
install.packages(c("zoo"))
runApp('Lines/R/stockVis')
nsubjects <- 10
ya <- rnorm(nsubjects)
yb <- rnorm(nsubjects, mean= 0.2)
xa <- rep("A", nsubjects)
xb <- rep("B", nsubjects)
y <- c(ya, yb)
x <- c(xa, xb)
df <- cbind(x, y)
View(df)
t.test(y-x, alternative="greater", data=df)
t.test(y - x, alternative="greater", data=df)
t.test(y-x, alternative="greater", data=df)
df <- as.data.cbind(x, y)
t.test(y-x, alternative="greater", data=df)
df <- data.frame(x, y)
t.test(y-x, alternative="greater", data=df)
factors(df$x)
library(shiny); runApp('Lines/basic-income/script.R')
install.packages("rgdal", type = "source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.11/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
install.packages("rgeos", type = "source")
install.packages("geosjon")
install.packages("geojson")
runApp('Lines/basic-income/script.R')
install.packages("geojsonio")
install.packages("geojsonio")
library(shiny); runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
install.packages("leaflet")
install.packages("htmltools")
install.packages("htmltools")
library(shiny); runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
install.packages("potly")
library(shiny); runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="maps-small-multiple")
Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
#chart_link = api_create(p, filename="maps-small-multiple")
#
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
#chart_link = api_create(p, filename="maps-small-multiple")
#chart_link
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
#chart_link = api_create(p, filename="maps-small-multiple")
#chart_link
p
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
source('~/Lines/R/test/teest.R')
install.packages("plotly")
install.packages("plotly")
source('~/Lines/R/test/teest.R')
source('~/Lines/R/test/teest.R')
source('~/Lines/R/test/teest.R')
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
spdf <- geojson_read("data/europe.geo.json",  what = "sp")
names(spdf)
library(geojsonio)
spdf <- geojson_read("data/europe.geo.json",  what = "sp")
names(spdf)
library(geojsonio)
spdf <- geojson_read("data/europe.geo.json",  what = "sp")
names(spdf)
library(shiny); runApp('Lines/basic-income/script.R')
library(geojsonio)
require(leaflet)
require(htmltools)
spdf <- geojson_read("data/europe.geo.json",  what = "sp")
names(spdf)
bins <- c(0, 1, 2, 3, 4, 5, 6, 7, Inf)
pal <- colorBin("YlOrRd", domain = spdf$labelrank, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g </sup>",
spdf$admin, spdf$labelrank
) %>% lapply(htmltools::HTML)
m <- leaflet(spdf) %>%
setView(15, 54, 3) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons(
fillColor = ~pal(labelrank),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
library(geojsonio)
require(leaflet)
require(htmltools)
spdf <- geojson_read("europe.geo.json",  what = "sp")
names(spdf)
bins <- c(0, 1, 2, 3, 4, 5, 6, 7, Inf)
pal <- colorBin("YlOrRd", domain = spdf$labelrank, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g </sup>",
spdf$admin, spdf$labelrank
) %>% lapply(htmltools::HTML)
m <- leaflet(spdf) %>%
setView(15, 54, 3) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons(
fillColor = ~pal(labelrank),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
library(shiny); runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
runApp('Lines/basic-income/script.R')
